#include <iostream>
#include "PlaylistNode.h"

using namespace std;
PlaylistNode* headNode;
PlaylistNode* currNode;
PlaylistNode* lastNode;

void PrintMenu(const string playlistTitle) {
   cout << playlistTitle << " PLAYLIST MENU" << endl;
   cout << "a - Add song" << endl;
   cout << "d - Remove song" << endl;
   cout << "c - Change position of song" << endl;
   cout << "s - Output songs by specific artist" << endl;
   cout << "t - Output total time of playlist (in seconds)" << endl;
   cout << "o - Output full playlist" << endl;
   cout << "q - Quit" << endl;
}

PlaylistNode* ExecuteMenu(char option, string playlistTitle, PlaylistNode* headNode) {
   string userInput; // Var that can be reused across options
   int playtime = 0; // for compiled playtime
   int counter = 0; // for compiled playtime
   string ignore;
   string uniqueIDInit;
   string songNameInit;
   string artistNameInit;
   int songLengthInit;
   PlaylistNode* nextLoc;
   
   if(option == 'q'){ // QUIT
      
   }
   else if(option == 'a'){ // Add song
      cout << "ADD SONG" << endl;
      cout << "Enter song's unique ID:" << endl;
      cin.ignore(256, '\n');
      getline(cin, uniqueIDInit);
      cout << "Enter song's name:" << endl;
   	getline(cin, songNameInit);
      cout << "Enter artist's name:" << endl;
   	getline(cin, artistNameInit);
      cout << "Enter song's length (in seconds):" << endl;
      cin >> songLengthInit;
      
      cout << endl;
      currNode = new PlaylistNode(uniqueIDInit, songNameInit, artistNameInit, songLengthInit);
		lastNode->InsertAfter(currNode);
		lastNode = currNode;
   }
   else if(option == 'd'){ // Remove song
      cout << "REMOVE SONG" << endl;
      cout << "Enter song's unique ID:" << endl;
      cin >> userInput;
      
      PlaylistNode* temp = headNode;
      PlaylistNode* prev = 0;
   
      while(temp != 0 && temp->GetID() != userInput){
         prev = temp;
         temp = temp->GetNext();
      }
   
      if(temp == 0){
      cout << "Song not found." << endl;
      } 
      else if(prev == 0){ 
         headNode = temp->GetNext();
      } 
      else {
         prev->SetNext(temp->GetNext());
      }
      cout << "\"" << temp->GetSongName() << "\" removed." << endl;
      delete temp;
      cout << endl;
   }
   else if(option == 'c'){ // Change position of song
      // Not needed for the assignment
      cout << "NOT NEEDED FOR ASSIGNMENT";
   }
   else if(option == 's'){ // Output songs by specific artist
      cout << "OUTPUT SONGS BY SPECIFIC ARTIST" << endl;
      cout << "Enter artist's name:" << endl << endl;
      cin.ignore(256, '\n');
      getline(cin, userInput);
      
      PlaylistNode* tmpNext;
      tmpNext = headNode->GetNext();
      
      nextLoc = headNode->GetNext();
      while(tmpNext != 0) {
         counter += 1;
         if(userInput == tmpNext->GetArtistName()){ 
            cout << counter << "." << endl;
            tmpNext->PrintPlaylistNode();  
            cout << endl;
         }
         tmpNext = tmpNext->GetNext();
      }
   }
   else if(option == 't'){ // Output total time of playlist (in seconds)
      cout << "OUTPUT TOTAL TIME OF PLAYLIST (IN SECONDS)" << endl;
      PlaylistNode* tmpNext;
      tmpNext = headNode;
      while(tmpNext != 0) {
         playtime += tmpNext->GetSongLength();  
         tmpNext = tmpNext->GetNext();
      }
      cout << "Total time: " << playtime << " seconds" << endl << endl;
   }
   else if(option == 'o'){ // Output full playlist
      
      PlaylistNode* tmpNext;
      tmpNext = headNode->GetNext();
      if(tmpNext != 0) {
         cout << playlistTitle << " - OUTPUT FULL PLAYLIST" << endl;
         while(tmpNext != 0) {
            counter += 1;
            cout << counter << "." << endl;
            tmpNext->PrintPlaylistNode();  
            tmpNext = tmpNext->GetNext();
            if(tmpNext != 0)
               cout << endl;
         }
      }
      else {
         cout << playlistTitle << " - OUTPUT FULL PLAYLIST" << endl << "Playlist is empty" << endl;
      }
      cout << endl;
   }
      
   return headNode;
}

int main() {
   string uniqueID;
   string songName;
   string artistName;
   int songLength;
   
   string playlistName;
   char option;
                               
   headNode = new PlaylistNode();
   lastNode = headNode;
    
   cout << "Enter playlist's title:" << endl;
   getline(cin, playlistName);
   cout << endl;
   PrintMenu(playlistName);
   cout << endl << "Choose an option:" << endl;
   while( cin >> option ){
      if((option == 'a')||(option == 'd')||(option == 'c')||(option == 's')||(option == 't')||(option == 'o')){
         ExecuteMenu(option, playlistName, headNode);
         PrintMenu(playlistName);
         cout << endl << "Choose an option:" << endl;
      }
      else {
         return 0;
      }
   }

   return 0;
}

